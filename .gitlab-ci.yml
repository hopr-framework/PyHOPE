# -*- coding: utf-8 -*-
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of PyHOPE
#
# Copyright (c) 2024 Numerics Research Group, University of Stuttgart, Prof. Andrea Beck
#
# PyHOPE is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# PyHOPE is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# PyHOPE. If not, see <http://www.gnu.org/licenses/>.

# ==================================================================================================================================
# Continuous Integration/Continuous Deployment
# ==================================================================================================================================

# Official language image. Look for the different tagged releases at:
# > https://hub.docker.com/r/library/python/tags/
image: registry.iag.uni-stuttgart.de/flexi/codes/pyhope/nrg-python:3.13.2-bookworm-x86_64

# Change pip's cache directory to be inside the project directory since we can only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  # Enable the faster OverlayFS driver
  DOCKER_DRIVER: overlay2

# https://pip.pypa.io/en/stable/topics/caching/
cache:
  paths:
    - venv
    - .cache/pip

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Templates ("hidden jobs")
# ----------------------------------------------------------------------------------------------------------------------------------------------------
.defaults: &defaults
  tags: [dockertag]

.defaults_coverage: &defaults_coverage
  <<: *defaults
  artifacts:
    paths:
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Setup
# ----------------------------------------------------------------------------------------------------------------------------------------------------

# Define a reusable global before_script with YAML anchors
.global-before-script: &global-before-script
  # Setup system
  - ulimit -s unlimited
  # - module list || true
  - python3 --version
  # Setup required packages
  # - | # Literal YAML multiline block scalar indicator
  #   if command -v apt-get >/dev/null 2>&1; then
  #     apt-get update
  #     apt-get install -y libglu1-mesa-dev freeglut3-dev mesa-common-dev libxcursor1 libxinerama1
  #   fi
  # - | # Literal YAML multiline block scalar indicator
  #   if command -v dnf >/dev/null 2>&1; then
  #     dnf makecache
  #     dnf install -y mesa-libGLU-devel freeglut-devel libXcursor libXinerama
  #   fi
  # Setup uv
  - uv --version
  # Setup Python virtual environment
  - rm -rf venv
  - uv venv venv
  - source venv/bin/activate
  # # Cleanup previous installs
  # - pip freeze | xargs pip uninstall -y --root-user-action=ignore
  # Install all pre-requisites
  - uv pip install --no-cache-dir -e .
  # Regression checks needs NRG Gmsh
  - uv pip uninstall gmsh
  - uv pip install --no-cache-dir https://gitlab.iag.uni-stuttgart.de/libs/python-gmsh/-/raw/master/gmsh-4.13.1.post1-py3-none-linux_x86_64.whl
  # Install coverage
  - uv pip install --no-cache-dir coverage

before_script: *global-before-script
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stages
# ----------------------------------------------------------------------------------------------------------------------------------------------------
stages:
  - lint
  - compatibility
  - coverage
  - convergence

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Linter
# ----------------------------------------------------------------------------------------------------------------------------------------------------
ruff:
  extends: .defaults
  stage: lint
  script:
    - uv pip install ruff
    - ruff --version
    - ruff check --extend-ignore=E201,E202,E203,E221,E222,E225,E231,E271,E272 --line-length=132 --preview pyhope/

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Compatibility
# ----------------------------------------------------------------------------------------------------------------------------------------------------

.compatibility-script: &compatibility-script
  script:
    - cd tutorials
    # Check internal meshing
    - pyhope 1-04-cartbox_multiple_stretch/parameter.ini
    # Check external meshing
    - pyhope 2-02-external_mesh_CGNS_mixed/parameter.ini

# Python 3.10 ----------------------------------------------------------------------------------------------------------------------------------------
python:3.10:
  extends: .defaults
  stage: compatibility
  image: registry.iag.uni-stuttgart.de/flexi/codes/pyhope/nrg-python:3.10.16-bookworm-x86_64
  <<: *compatibility-script
# Python 3.11 ----------------------------------------------------------------------------------------------------------------------------------------
python:3.11:
  extends: .defaults
  stage: compatibility
  image: registry.iag.uni-stuttgart.de/flexi/codes/pyhope/nrg-python:3.11.11-bookworm-x86_64
  <<: *compatibility-script
# Python 3.12 ----------------------------------------------------------------------------------------------------------------------------------------
python:3.12:
  extends: .defaults
  stage: compatibility
  image: registry.iag.uni-stuttgart.de/flexi/codes/pyhope/nrg-python:3.12.9-bookworm-x86_64
  <<: *compatibility-script
# Python 3.13 ----------------------------------------------------------------------------------------------------------------------------------------
python:3.13:
  extends: .defaults
  stage: compatibility
  # image: registry.iag.uni-stuttgart.de/flexi/codes/pyhope/nrg-python:3.13.2-bookworm-x86_64 # default version at the moment
  <<: *compatibility-script
# # Python 3.14 ----------------------------------------------------------------------------------------------------------------------------------------
# python_314:
#   extends: .defaults
#   stage: compatibility
#   image: registry.iag.uni-stuttgart.de/flexi/codes/pyhope/nrg-python:3.14-rc-bookworm-x86_64
#   <<: *compatibility-script

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Reggie
# ----------------------------------------------------------------------------------------------------------------------------------------------------
coverage:
  extends: .defaults_coverage
  stage: coverage
  script:
    # Store the base directory
    - basedir=$(pwd)

    # Define colors for PASS/FAIL output
    - green="\033[32m"
    - red="\033[31m"
    - reset="\033[0m"

    # Initialize an array for storing results (directory and pass/fail status)
    - declare -a results

    # Store all directories with "parameter.ini" files in an array (bash-only)
    - mapfile -d '' paramfiles < <(find tutorials -type f -name "parameter.ini" -print0 | sort -z)
    - echo "Found "${#paramfiles[@]}" parameter.ini files..."

    # Calculate max width
    - max_dir_length=0
    - | # Literal YAML multiline block scalar indicator
      for paramfile in "${paramfiles[@]}"; do
        paramdir=$(dirname "$paramfile")
        paramlen=${#paramdir}

        if [ "$paramlen" -gt "$max_dir_length" ]; then
          max_dir_length=$paramlen
        fi
      done
    - box_width=$((max_dir_length + 10))  # Add padding for aesthetics
    - col_width=$((max_dir_length + 2))   # Add padding for the table

    # Iterate over all directories, run tests, and collect results
    - echo "Running PyHOPE with coverage for each parameter.ini file..."

    - | # Literal YAML multiline block scalar indicator
      for paramfile in "${paramfiles[@]}"; do
        paramdir=$(dirname  "$paramfile")
        paramstr=$(basename "$paramdir" )
        paramini=$(basename "$paramfile")

        # Print a message for the running task
        echo ""
        printf "┌─%s─┐\n" "$(printf '─%.0s' $(seq 1 $((box_width))))"
        printf "│ Running %-$(($box_width-8))s │\n" "$paramdir"
        printf "└─%s─┘\n" "$(printf '─%.0s' $(seq 1 $((box_width))))"

        # Change directory to where the parameter.ini file is located, suppress output
        pushd "$paramdir" > /dev/null

        # Run the script under coverage and capture the result
        if coverage run --data-file="$basedir/.coverage.$paramstr" --source="$basedir" -m pyhope "$paramini"; then
          results+=("$paramdir: PASS")
          echo -e "${green}✔ PASS${reset}: $paramini"
        else
          results+=("$paramdir: FAIL")
          echo -e "${red}✖ FAIL${reset}: $paramini"
        fi

        # Return to the previous directory, suppress output
        popd > /dev/null
      done

    # Combine coverage reports from all example directories
    - echo "Combining coverage reports..."
    - coverage combine

    # Generate the coverage report in XML format
    - echo "Generating coverage report..."
    - coverage xml
    - coverage report --skip-empty

    # Output the final sorted report as a UTF-8 box-drawing table
    - | # Literal YAML multiline block scalar indicator
      echo ""
      printf "┌─%s─┬────────┐\n" "$(printf '─%.0s' $(seq 1 $((max_dir_length))))"
      printf "│ %-$(($col_width-2))s │ %-5s │\n" "Example Directory" "Result"
      printf "├─%s─┼────────┤\n" "$(printf '─%.0s' $(seq 1 $((max_dir_length))))"
      for result in "${results[@]}"; do
        paramdir=$(echo "$result" | cut -d ':' -f 1)
        paramres=$(echo "$result" | cut -d ':' -f 2 | tr -d '[:space:]')

        if [[ "$paramres" == "PASS" ]]; then
          printf "│ %-$(($col_width-2))s │ ${green}%-6s${reset} │\n" "$paramdir" "$paramres"
        else
          printf "│ %-$(($col_width-2))s │ ${red}%-6s${reset} │\n" "$paramdir" "$paramres"
        fi
      done
      printf "└─%s─┴────────┘\n" "$(printf '─%.0s' $(seq 1 $((max_dir_length))))"

    # Fail the job if any examples failed
    - | # Literal YAML multiline block scalar indicator
      if [[ "${results[*]}" == *"FAIL"* ]]; then
        echo "Some examples failed.";
        exit 1;
      else
        echo "All examples passed.";
      fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# FLEXI convergence tests
# ----------------------------------------------------------------------------------------------------------------------------------------------------
convergence:
  extends: .defaults
  stage: convergence
  image: registry.iag.uni-stuttgart.de/flexi/codes/pyhope/nrg-fedora:41-x86_64
  artifacts:
    paths:
      - convergence_artifacts.log
  script:
    - | # Literal YAML multiline block scalar indicator
      artifact_file="convergence_artifacts.log"
      rm $artifact_file || true
      touch $artifact_file
    - directories=("5-02-convtest_flipped" "5-03-convtest_mortar") # List of directories to process
    - | # Literal YAML multiline block scalar indicator
      for dir in "${directories[@]}"; do
        echo "=== Processing directory: $dir ==="
        rm -rf convergence_test || true
        mkdir convergence_test
        cd convergence_test
        cp "../tutorials/$dir/parameter_template_pyhope.ini" .
        cp "../tutorials/$dir/parameter_flexi.ini" .
        # Generate Meshes
        meshres=("001" "002" "004" "008")
        template_file="parameter_template_pyhope.ini"
        for res in "${meshres[@]}"; do
          # Calculate nElem2 as half the integer res of nElem
          nElem2=$((10#$res / 2)) # Interpret value as a base-10 integer
          # Create a temporary parameter file
          temp_file=$(mktemp)
          # Replace placeholders in the template and save to the temporary file
          sed -e "s/<nElem>/$res/g" -e "s/<nElem2>/$nElem2/g" "$template_file" > "$temp_file"
          # Build the mesh
          pyhope "$temp_file"
          # Clean up the temporary file
          rm "$temp_file"
        done
        # Call convergence script
        for N in {1..4}; do
          echo ""
          echo "=== Running Convergence Test N=$N ===" | tee -a ../convergence.log
          python3 /flexi/tools/convergence_test/convergence_grid --N $N --dim 3 --procs 1 /flexi/build/bin/flexi parameter_flexi.ini | tee -a ../convergence.log
        done
        cd ..
        # Merge convergence.log for artifacts
        echo "===== Processing Folder: $dir =====" >> "$artifact_file"
        cat "convergence.log" >> "$artifact_file"
        echo "" >> "$artifact_file"
        # Analyze convergence behavior using a simple python script
        python3 << EOF # Collapsed multi-line command
      import sys

      # Input file
      convfile = "convergence.log"

      # Set tolerance bounds: (N+1)+-0.35
      def compute_expected_range(N):
          return N + 0.65, N + 1.35

      # Process the results
      def process_results(degree, data):
          min_eoc, max_eoc = compute_expected_range(degree)
          print(f"\n=== Checking EOCs for Polynomial Degree N={degree} (Expected: [{min_eoc}, {max_eoc}]) ===")
          results = []
          for idx, (grid, eoc) in enumerate(data[1:]):
              passed = min_eoc <= eoc <= max_eoc
              results.append((grid, min_eoc, max_eoc, eoc, "PASS" if passed else ("(PASS)" if idx < len(data) - 2 else "FAIL")))
          draw_table(results)
          return all(r[4] == "PASS" for r in results[-1:])

      # Draw the results as a table
      def draw_table(results):
          print("\n┌───────┬─────────┬─────────┬─────────┬────────┐")
          print("│ Mesh  │   min   │   max   │  result │ Passed │")
          print("├───────┼─────────┼─────────┼─────────┼────────┤")
          for grid, min_eoc, max_eoc, result, passed in results:
              pass_col = ( "\033[92m PASS \033[0m" if passed == "PASS" else ("\033[93m(PASS)\033[0m" if passed == "(PASS)" else "\033[91m FAIL \033[0m"))
              print(f"│ {grid:^5} │ {min_eoc:^7.2f} │ {max_eoc:^7.2f} │ {result:^7.2f} │ {pass_col:^6} │")
          print("└───────┴─────────┴─────────┴─────────┴────────┘")

      # Parse the log file
      try:
          with open(convfile, "r") as f:
              lines = f.readlines()
      except FileNotFoundError:
          sys.exit(f"Error: File '{convfile}' not found.")

      # Process the file
      success, current_degree, current_data = True, None, []

      for line in lines:
          line = line.strip()
          # Match polynomial degree header
          if line.startswith("=== Running Convergence Test") and "N=" in line:
              # Process the previous degree upon encountering a new header
              if current_degree is not None:
                  success &= process_results(current_degree, current_data)
              try:
                  current_degree = int(line.split("N=")[1].split()[0])
              except ValueError:
                  current_degree = None
              current_data = []
          # Match grid data rows
          elif current_degree is not None and "║" in line:
              try:
                  grid, eoc = int(line.split("║")[0].strip()), float(line.split("║")[2].strip())
                  current_data.append((grid, eoc))
              except ValueError:
                  pass

      # Final processing for the last degree with no subsequent header
      if current_degree is not None:
          success &= process_results(current_degree, current_data)

      # Final status
      sys.exit(0 if success else print("Some EOCs are out of range.") or 1)
      EOF

        # Clean-up the log file
        rm -f convergence.log
      done
